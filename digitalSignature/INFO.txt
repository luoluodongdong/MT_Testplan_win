using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

/// <summary>
         ///   计算SHA1值
         /// </summary>
         /// <param name="fileName">文件地址</param>
         /// <param name="blockletter">是否输出大写</param>
         /// <returns></returns>
         public static string GetSHA1HashFromFile(string fileName, bool blockletter)
         {
             var tragetFile = new System.IO.FileStream(fileName, System.IO.FileMode.Open);
             var sha1 = new System.Security.Cryptography.SHA1CryptoServiceProvider();
             byte[] hashbytes = sha1.ComputeHash(tragetFile);
             tragetFile.Close();
 
             System.Text.StringBuilder sb = new System.Text.StringBuilder();
             for (int i = 0; i < hashbytes.Length; i++)
             {
                 if (blockletter) //判断输出大小写
                     sb.Append(hashbytes[i].ToString("X2"));
                 else
                     sb.Append(hashbytes[i].ToString("x2"));
             }
             return sb.ToString();
         }
/// <summary>
        /// 进行 RSA 加密
        /// </summary>
        /// <param name="sourceStr">源字符串</param>
        /// <returns>加密后字符串</returns>
        public static string RsaEncrypt(string sourceStr)
        {
            param = new CspParameters();
            //密匙容器的名称，保持加密解密一致才能解密成功
            param.KeyContainerName = "Navis";
            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(param))
            {
                //将要加密的字符串转换成字节数组
                byte[] plaindata = Encoding.Default.GetBytes(sourceStr);
                //通过字节数组进行加密
                byte[] encryptdata = rsa.Encrypt(plaindata, false);
                //将加密后的字节数组转换成字符串
                return Convert.ToBase64String(encryptdata);
            }
        }

        /// <summary>
        /// 通过RSA 加密方式进行解密
        /// </summary>
        /// <param name="codingStr">加密字符串</param>
        /// <returns>解密后字符串</returns>
        public static string RsaDesEncrypt(string codingStr)
        {
            param = new CspParameters();
            param.KeyContainerName = "Navis";
            using(RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(param))
            {
                byte[] encryptdata = Convert.FromBase64String(codingStr);
                byte[] decryptdata = rsa.Decrypt(encryptdata, false);
                return Encoding.Default.GetString(decryptdata);
            }
        }
